# .github/workflows/common_pipeline.yml
name: Common Azure Terraform Workflow

on:
  workflow_call:
    inputs:
      env_name:
        description: 'Environment name (e.g., dev, qa, prod)'
        required: true
        type: string
      working_dir:
        description: 'Directory path for the environment Terraform code'
        required: true
        type: string
      terraform_state_key:
        description: 'Key for the Terraform backend state file'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  bootstrapping:
    name: 'Bootstrapping'
    runs-on: ubuntu-latest

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIAL }}

      - name: Create Resource Group (if not exists)
        id: create_rg
        run: |
          if ! az group show --name ${{ vars.AZ_BASE_RESOURCE_GROUP }} &> /dev/null; then
            az group create --name ${{ vars.AZ_BASE_RESOURCE_GROUP }} --location ${{ vars.AZ_BASE_LOCATION }}
          else
            echo "Resource group ${{ vars.AZ_BASE_RESOURCE_GROUP }} already exists"
          fi

      - name: Create Storage Account (if not exists)
        id: create_storage_account
        run: |
          if ! az storage account show --name ${{ vars.AZ_BASE_STORAGE }} --resource-group ${{ vars.AZ_BASE_RESOURCE_GROUP }} &> /dev/null; then
            az storage account create --resource-group ${{ vars.AZ_BASE_RESOURCE_GROUP }} --name ${{ vars.AZ_BASE_STORAGE }} --sku Standard_LRS --encryption-services blob --kind StorageV2
          else
            echo "Storage account ${{ vars.AZ_BASE_STORAGE }} already exists"
          fi

      - name: Create Storage Container (if not exists)
        id: create_storage_container
        run: |
          if ! az storage container show --name ${{ vars.AZ_BASE_CONTAINER }} --account-name ${{ vars.AZ_BASE_STORAGE }} &> /dev/null; then
            az storage container create --account-name ${{ vars.AZ_BASE_STORAGE }} --name ${{ vars.AZ_BASE_CONTAINER }}
          else
            echo "Storage container ${{ vars.AZ_BASE_CONTAINER }} already exists"
          fi

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: bootstrapping

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd ${{ inputs.working_dir }}
          terraform init \
            -backend-config="storage_account_name=${{ vars.AZ_BASE_STORAGE }}" \
            -backend-config="container_name=${{ vars.AZ_BASE_CONTAINER }}" \
            -backend-config="resource_group_name=${{ vars.AZ_BASE_RESOURCE_GROUP }}" \
            -backend-config="key=${{ inputs.terraform_state_key }}"

      - name: Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd ${{ inputs.working_dir }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd ${{ inputs.working_dir }}
          terraform apply -auto-approve tfplan
